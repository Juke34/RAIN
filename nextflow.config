manifest {
    name = 'RAIN'
    author = 'Jacques Dainat, Eduardo Ascarrunz'
    homePage = 'https://github.com/Juke34/RAIN'
    description = 'RNA Alterations Investigation using Nextflow'
    mainScript = 'rain.nf'
    nextflowVersion = '>=22.04.0'
    version = '0.1'
}

// default parameters
params {
    // to store general information about pipeline execution
    pipeline_report="pipeline_report"
    monochrome_logs = false
}

// Include a base config (2 forks of 1 CPU)
includeConfig "$baseDir/config/resources/base.config"

profiles {

    itrop {
        process {
	   executor        = 'slurm'                // Tells Nextflow to submit jobs using the SLURM workload manager
           maxForks        = 12                     // Limits the maximum number of jobs that can be submitted concurrently for that process
           shell           = ['/bin/bash', '-euo', 'pipefail'] // Shell options: -e: Exit immediately on error (non-zero exit status); -u: Treat unset variables as an error; -o pipefail: The pipeline fails if any command in the pipeline fails
	   queue           = 'normal'               // Submits jobs to the SLURM partition (also called “queue”) named normal.
	   scratch         = false                  // Use shared file system, not local node /tmp
	   stageOutMode    = 'move'                 // Move is safe on shared FS and faster than copy
	   publishDirMode  = 'rsync'                // For final outputs, copy to results folder
           errorStrategy   = 'retry'                // Retry failing jobs automatically
	   maxRetries      = 3                      // Retry up to 3 times
           clusterOptions  = "--constraint=infiniband" // extra parameters provided to the scheduler
        }

        singularity.enabled = true
        params.sifPath = "${baseDir}/sif_images"
        // singularity.envWhitelist = '' // Comma separated list of environment variable names to be included in the container environment.	
        includeConfig "$baseDir/config/softwares.config"
        includeConfig "$baseDir/config/resources/hpc.config"
    }

    debug { process.beforeScript = 'env' }

    docker {
        docker.enabled = true
        singularity.enabled =  false    // This attribute needs to exist for selecting the containers in config/softwares.config
        includeConfig "$baseDir/config/softwares.config"
        docker.runOptions='-u "$( id -u ):$( id -g )"'
    }

    singularity {
        singularity.enabled = true
        sifPath = "${baseDir}/sif_images"
        includeConfig "$baseDir/config/softwares.config"
    }
    local {
        includeConfig "$baseDir/config/resources/local.config"
    }
    test {
        params.aline_profiles = "${baseDir}/config/resources/base_aline.config" 
        params.aligner        = "STAR" 
        params.reads          = "${baseDir}/data/chr21/chr21_small_R1.fastq.gz"
        params.genome         = "${baseDir}/data/chr21/chr21_small.fasta.gz"
        params.annotation     = "${baseDir}/data/chr21/chr21_small_filtered.gff3.gz"
        params.strandedness   = "ISR" 
        params.read_type      = "short_single"
    }
    test2 {
        params.aline_profiles = "${baseDir}/config/resources/base_aline.config" 
        params.aligner        = "STAR" 
        params.reads          = "${baseDir}/data/chr21/"
        params.genome         = "${baseDir}/data/chr21/chr21_small.fasta.gz" 
        params.annotation     = "${baseDir}/data/chr21/chr21_small_filtered.gff3.gz"
        params.strandedness   = "ISR" 
        params.read_type      = "short_paired"
    }
}

resume = true

timeline {
    enabled = true
    file = "${params.pipeline_report}/execution_timeline_${new Date().format('yyyyMMddHHmmss')}.html"
}

report {
    enabled = true
    file = "${params.pipeline_report}/execution_report_${new Date().format('yyyyMMddHHmmss')}.html"
}

trace {
    enabled = true
    file = "${params.pipeline_report}/execution_trace_${new Date().format('yyyyMMddHHmmss')}.txt"
}

dag {
    enabled = true
    file = "${params.pipeline_report}/pipeline_dag_${new Date().format('yyyyMMddHHmmss')}.svg"
}
